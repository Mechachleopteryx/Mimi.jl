{"version":3,"sources":["ExplorerVariableView.tsx","serviceWorker.ts","index.tsx","App.tsx","ExplorerTreeView.tsx"],"names":["ExplorerVariableView","props","setVariables","nodeInfo","setState","nodes","renderNode","nodeState","console","dir","name","item_name","comp_name","renderVal","render","state","map","n","id","global","React","Component","defaultProps","Boolean","window","location","hostname","match","unregister","navigator","serviceWorker","ready","then","registration","catch","error","message","ReactDOM","document","getElementById","spec","embed","actions","App","className","ExplorerTreeView","setTreeChildren","childrenInfo","children","renderTree","node","key","nodeId","label","defaultCollapseIcon","defaultExpanded","defaultExpandIcon","Array"],"mappings":"oNAmBqBA,E,kDAMjB,WAAYC,GAA2B,IAAD,8BAClC,cAAMA,IASVC,aAAe,SAACC,GACZ,EAAKC,SAAS,CAACC,MAAOF,KAXY,EActCG,WAAa,SAACC,GACVC,QAAQC,IAAIF,EAAUG,MACtBF,QAAQC,IAAIF,EAAUI,WACtBH,QAAQC,IAAIF,EAAUK,WAEtB,IAAMC,EAAY,4BAAKN,EAAUG,MAGjC,OAFAF,QAAQC,IAAII,GAELA,GAtB2B,EAyBtCC,OAAS,WACL,IAAMD,EACN,6BACI,4BAAK,EAAKE,MAAML,MAChB,4BACK,EAAKK,MAAMV,MAAQ,EAAKU,MAAMV,MAAMW,KAAI,SAACC,GAAD,OAAO,EAAKX,WAAWW,MAAM,OAO9E,OAFAT,QAAQC,IAAII,GAELA,GAnCP,EAAKE,MAAO,CACRG,GAAIjB,EAAMiB,GACVR,KAAMT,EAAMS,KACZL,MAAO,IAEXc,EAAM,aAAmB,EAAKjB,aAPI,E,UANQkB,IAAMC,WAAnCrB,EACVsB,aAAe,CAClBJ,GAAI,GACJR,KAAM,M,mDCtBd,kCAYoBa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAwHC,SAASC,IACV,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaL,gBAEdM,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c,uECjJ5B,0FAOAC,IAASvB,OACP,kBAAC,IAAD,MACAwB,SAASC,eAAe,SAO1BT,MAMAX,EAAM,QAJN,SAAiBqB,GACfC,kBAAM,OAAQD,EAAI,OAAY,CAACE,SAAS,M,8FCnB1C,8CAuBeC,IAlBf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,CACElC,KAAK,kBAEP,6BACA,6BACA,6BACA,kBAAC,IAAD,CACEQ,GAAG,eACHR,KAAK,WAEP,yBAAKQ,GAAG,MAAM0B,UAAU,e,4JCLTC,E,kDAMjB,WAAY5C,GAAuB,IAAD,8BAC9B,cAAMA,IAQV6C,gBAAkB,SAACC,GACfvC,QAAQC,IAAIsC,GACZ,EAAK3C,SAAS,CAAC4C,SAAUD,KAXK,EAclCE,WAAa,SAACC,GAEV,OADA1C,QAAQC,IAAIyC,EAAKxC,MACT,kBAAC,IAAD,CAAUyC,IAAKD,EAAKxC,KAAM0C,OAAQF,EAAKxC,KAAM2C,MAAOH,EAAKxC,MACnDwC,EAAKF,SAAWE,EAAKF,SAAShC,KAAI,SAACC,GAAD,OAAO,EAAKgC,WAAWhC,MAAM,OAjB/C,EAqBlCH,OAAS,WAYL,OAXmB,kBAAC,IAAD,CACf8B,UAAW,eACXU,oBAAqB,kBAAC,IAAD,MACrBC,gBAAiB,CAAC,QAClBC,kBAAmB,kBAAC,IAAD,OAElB,EAAKP,WAAW,EAAKlC,SA1B1B,EAAKA,MAAO,CACRL,KAAMT,EAAMS,KACZsC,SAAU,IAAIS,OAElBtC,EAAM,gBAAsB,EAAK2B,gBANH,E,UANQ1B,IAAMC,WAA/BwB,EAEVvB,aAAe,CAClBZ,KAAM,M","file":"static/js/main.78e63581.chunk.js","sourcesContent":["import React from 'react';\n\nexport interface VariableViewProps {\n    id: string\n    name: string,\n}\n\ntype VariableViewState = {\n    id: string,\n    name: string,\n    nodes: VariableNodeState[],\n}\n\ntype VariableNodeState = {\n    name: string,\n    item_name: string,\n    comp_name: string,\n}\n\nexport default class ExplorerVariableView extends React.Component<VariableViewProps, VariableViewState> {\n    static defaultProps = {\n        id: \"\",\n        name: \"\"\n    };\n\n    constructor(props: VariableViewProps) {\n        super(props);\n        this.state ={\n            id: props.id,\n            name: props.name,\n            nodes: [],\n        }\n        global[\"setVariables\"] = this.setVariables;\n    }\n\n    setVariables = (nodeInfo:VariableNodeState[]) => {\n        this.setState({nodes: nodeInfo});\n    }\n\n    renderNode = (nodeState: VariableNodeState) => {\n        console.dir(nodeState.name)\n        console.dir(nodeState.item_name)\n        console.dir(nodeState.comp_name)\n\n        const renderVal = <li>{nodeState.name}</li>;\n        console.dir(renderVal);\n\n        return renderVal;\n    }\n\n    render = () => {\n        const renderVal = (\n        <div>\n            <h4>{this.state.name}</h4>\n            <ul>\n                {this.state.nodes ? this.state.nodes.map((n) => this.renderNode(n)) : null}\n            </ul>\n        </div>\n        );\n\n        console.dir(renderVal)\n\n        return renderVal;\n    };\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import embed from 'vega-embed';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n\nfunction display(spec) {\n  embed(\"#vis\", spec[\"VLspec\"], {actions: false});\n}\n\nglobal['display'] = display\n","import React from 'react';\nimport './App.css';\nimport ExplorerTreeView from './ExplorerTreeView'\nimport ExplorerVariableView from './ExplorerVariableView'\n\nfunction App() {    \n  return (\n    <div className=\"App\">\n      <ExplorerTreeView\n        name=\"Subcomponents\"\n      ></ExplorerTreeView>\n      <br/>\n      <hr/>\n      <br/>\n      <ExplorerVariableView\n        id=\"variablelist\"\n        name=\"Values\"\n      ></ExplorerVariableView>\n      <div id=\"vis\" className=\"graphic\"></div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { TreeView, TreeItem } from '@material-ui/lab';\nimport { ExpandMore, ChevronRight } from \"@material-ui/icons\";\n\nexport interface TreeViewProps {\n    name: string\n}\n\ntype TreeNodeState = {\n    name: string,\n    children: Array<TreeNodeState>\n}\n  \nexport default class ExplorerTreeView extends React.Component<TreeViewProps, TreeNodeState> {\n\n    static defaultProps = {\n        name: \"\",\n    }\n\n    constructor(props: TreeViewProps) {\n        super(props);\n        this.state ={\n            name: props.name,\n            children: new Array<TreeNodeState>()\n        }\n        global[\"setTreeChildren\"] = this.setTreeChildren;\n    }\n\n    setTreeChildren = (childrenInfo:Array<TreeNodeState>) => {\n        console.dir(childrenInfo)\n        this.setState({children: childrenInfo});\n    }\n\n    renderTree = (node:TreeNodeState) => {\n        console.dir(node.name);\n        return (<TreeItem key={node.name} nodeId={node.name} label={node.name}>\n                     {node.children ? node.children.map((n) => this.renderTree(n)) : null}\n                 </TreeItem>);\n    }\n\n    render = () => {\n        const renderVal = (<TreeView\n            className={\"classes.root\"}\n            defaultCollapseIcon={<ExpandMore />}\n            defaultExpanded={[\"root\"]}\n            defaultExpandIcon={<ChevronRight />}\n        >\n            {this.renderTree(this.state)}\n        </TreeView>);\n\n        // console.dir(renderVal)\n\n        return renderVal;\n    };\n}\n\n  "],"sourceRoot":""}
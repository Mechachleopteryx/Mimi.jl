{"version":3,"sources":["ExplorerDataView.tsx","serviceWorker.ts","index.tsx","App.tsx","ExplorerTreeView.tsx"],"names":["ExplorerDataView","props","setData","nodeInfo","setState","nodes","renderNode","nodeState","onClick","event","preventDefault","global","cmd","comp_name","item_name","name","render","style","height","state","overflow","vars","map","n","pars","id","React","Component","defaultProps","Boolean","window","location","hostname","match","unregister","navigator","serviceWorker","ready","then","registration","catch","error","console","message","ReactDOM","document","getElementById","spec","embed","actions","App","className","ExplorerTreeView","setTreeChildren","childrenInfo","children","renderTree","node","key","nodeId","label","onLabelClick","defaultCollapseIcon","defaultExpanded","defaultExpandIcon","Array"],"mappings":"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","file":"static/js/main.59c8c6b4.chunk.js","sourcesContent":["import React from 'react';\n\nexport interface DataViewProps {\n    id: string\n    name: string,\n}\n\ntype DataViewState = {\n    id: string,\n    name: string,\n    nodes: DataNodeListState,\n}\n\ntype DataNodeListState = {\n    vars: DataNodeState[],\n    pars: DataNodeState[],\n}\n\ntype DataNodeState = {\n    name: string,\n    item_name: string,\n    comp_name: string,\n}\n\nexport default class ExplorerDataView extends React.Component<DataViewProps, DataViewState> {\n    static defaultProps = {\n        id: \"\",\n        name: \"\"\n    };\n\n    constructor(props: DataViewProps) {\n        super(props);\n        this.state ={\n            id: props.id,\n            name: props.name,\n            nodes: {\n                vars: [],\n                pars: [],\n            },\n        }\n        global[\"setData\"] = this.setData;\n    }\n\n    setData = (nodeInfo:DataNodeListState) => {\n        this.setState({nodes: nodeInfo});\n    }\n\n    renderNode = (nodeState: DataNodeState) => {\n        return (<li onClick={(event) => {\n            event.preventDefault();\n            global[\"sendMessageToJulia\"]({\n                cmd: 'display_spec',\n                comp_name: nodeState.comp_name,\n                item_name: nodeState.item_name\n            })\n        }}>{nodeState.name}</li>);\n    }\n\n    render = () => {\n        const renderVal = (\n        <div style={{height:'50vh'}}>\n            <h4>{this.state.name}</h4>\n            <h6>Variables</h6>\n            <ul style={{height:'50%', overflow: 'auto'}}>\n                {this.state.nodes && this.state.nodes.vars ? this.state.nodes.vars.map((n) => this.renderNode(n)) : null}\n            </ul>\n            <h6>Parameters</h6>\n            <ul style={{height:'50%', overflow: 'auto'}}>\n                {this.state.nodes && this.state.nodes.pars ? this.state.nodes.pars.map((n) => this.renderNode(n)) : null}\n            </ul>\n        </div>\n        );\n        return renderVal;\n    };\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import embed from 'vega-embed';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n\nfunction display(spec) {\n  embed(\"#vis\", spec[\"VLspec\"], {actions: false});\n}\n\nglobal['display'] = display\n","import React from 'react';\nimport './App.css';\nimport ExplorerTreeView from './ExplorerTreeView'\nimport ExplorerDataView from './ExplorerDataView'\n\nfunction App() {    \n  return (\n    <div className=\"App\">\n      <div className=\"ExplorerBar\">\n          <ExplorerTreeView\n            name=\"Components\"\n          ></ExplorerTreeView>\n          <ExplorerDataView\n            id=\"datalist\"\n            name=\"Data\"\n          ></ExplorerDataView>\n      </div>\n      <div id=\"vis\" className=\"graphic\"></div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { TreeView, TreeItem } from '@material-ui/lab';\nimport { ExpandMore, ChevronRight } from \"@material-ui/icons\";\n\nexport interface TreeViewProps {\n    name: string\n}\n\ntype TreeNodeState = {\n    name: string,\n    children: Array<TreeNodeState>\n}\n  \nexport default class ExplorerTreeView extends React.Component<TreeViewProps, TreeNodeState> {\n\n    static defaultProps = {\n        name: \"\",\n    }\n\n    constructor(props: TreeViewProps) {\n        super(props);\n        this.state ={\n            name: props.name,\n            children: new Array<TreeNodeState>()\n        }\n        global[\"setTreeChildren\"] = this.setTreeChildren;\n    }\n\n    setTreeChildren = (childrenInfo:Array<TreeNodeState>) => {\n        this.setState({children: childrenInfo});\n    }\n\n    renderTree = (node:TreeNodeState) => {\n        return (\n            <div>\n                <TreeItem key={node.name} nodeId={node.name} label={node.name} onLabelClick= {(event)=> {\n                    event.preventDefault();\n                    global[\"sendMessageToJulia\"]({cmd: 'update_data', comp_name: node.name})\n                }}>\n                    {node.children ? node.children.map((n) => this.renderTree(n)) : null}\n                </TreeItem>\n            </div>\n        );\n    }\n\n    render = () => {\n        const renderVal = (<div>\n            <h4>{this.state.name}</h4>\n            <TreeView\n                className={\"classes.root\"}\n                defaultCollapseIcon={<ExpandMore />}\n                defaultExpanded={[\"root\"]}\n                defaultExpandIcon={<ChevronRight />}\n            >\n                {this.state.children ? this.state.children.map((n) => this.renderTree(n)) : null}\n            </TreeView>\n        </div>);\n        return renderVal;\n    };\n}\n\n  "],"sourceRoot":""}